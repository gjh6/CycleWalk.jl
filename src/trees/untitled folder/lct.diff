9,10c9,11
< function link_cut_tree(g::AG) where {U,AG<:AbstractGraph{U}}
<     tree = LinkCutTree{U}(nv(g))
---
> function link_cut_tree end
> @traitfn function link_cut_tree(g::AG::IsDirected) where {U,AG<:AbstractGraph{U}}
>     tree = linkCutTree{U}(nv(g))
13a15,18
>             expose!(tree.nodes[c])
>             if getLeft(tree.nodes[c]) isa Node
>                 evert!(tree.nodes[c])
>             end
21,31d25
< function link_cut_tree(g, tree_edges::Vector)
<     tree = LinkCutTree{Int}(nv(g))
< 
<     for e in tree_edges
<         evert!(tree.nodes[src(e)])
<         link!(tree.nodes[src(e)],tree.nodes[dst(e)])
<     end
< 
<     return tree
< end
< 
33c27
< struct LinkCutTree{T<:Integer}
---
> struct linkCutTree{T<:Integer}
35c29
<     nodes::AbstractArray{Union{Node, Nothing}}
---
>     nodes::AbstractArray{AbstractNode}
38,39c32,33
<     function LinkCutTree{T}(s::Integer) where {T<:Integer} 
<         f = new(Vector{Union{Node, Nothing}}(undef,s))
---
>     function linkCutTree{T}(s::Integer) where {T<:Integer} 
>         f = new(Vector{AbstractNode}(undef,s))
46c40
<     function LinkCutTree{T}(n::AbstractArray{Union{Node, Nothing}}) where {T<:Integer}
---
>     function linkCutTree{T}(n::AbstractArray{AbstractNode}) where {T<:Integer}
52c46
< #linkCutForest{T}() where {T<:Integer} = linkCutFoest{T}(Vector{Union{Node, Nothing}}[])
---
> #linkCutForest{T}() where {T<:Integer} = linkCutFoest{T}(Vector{AbstractNode}[])
55c49
< function parents(f::LinkCutTree{T}) where {T<:Integer}
---
> function parents(f::linkCutTree{T}) where {T<:Integer}
94c88
< function findPath(i::Integer, t::LinkCutTree)
---
> function findPath(i::Integer, t::linkCutTree)
98c92
<         B[i] = A[i].vertex
---
>         B[i] = getVertex(A[i])
105,106c99,100
< function replaceRightSubtree!(n::Node, r::Union{Node, Nothing}=nothing)
<     c = n.children[2]
---
> function replaceRightSubtree!(n::Node, r::AbstractNode=DummyNode{typeof(getVertex(n))}())
>     c = getRight(n)
108,110c102,103
<         c.pathParent = n
<         c.parent = nothing
<         push!(n.pathChildren, c)
---
>         setPathParent!(c, n)
>         setParent!(c, DummyNode{typeof(getVertex(c))}())
115,116c108
<         r.pathParent = nothing
<         delete!(n.pathChildren, r)
---
>         setPathParent!(r,DummyNode{typeof(getVertex(r))}())
129,130c121,122
<     while n.pathParent isa Node
<         p = n.pathParent
---
>     while getPathParent(n) isa Node
>         p = getPathParent(n)
141c133
<     if u.children[1] isa Node
---
>     if getLeft(u) isa Node
146c138
<     if u.parent isa Node || u.pathParent isa Node
---
>     if getParent(u) isa Node || getPathParent(u) isa Node
149,150c141,142
<     u.pathParent = v
<     push!(v.pathChildren, u)
---
> 
>     setPathParent!(u,v)
158c150
<     if !(u.children[1] isa Node)
---
>     if !(getLeft(u) isa Node)
162c154
<     v = u.children[1]
---
>     v = getLeft(u)
164,165c156,157
<     v.parent = nothing
<     setLeft!(u, nothing)
---
>     setParent!(v,DummyNode{typeof(getVertex(u))}())
>     setLeft!(u,DummyNode{typeof(getVertex(u))}())
176,269d167
< "Changes the root of the represented tree to u."
< function find_root!(u::Node)
<     expose!(u)
<     while u.children[1] != nothing
<         u = u.children[1]
<     end
<     return u
< end
< 
< 
< function nv_cc(node::Node, start=true) 
<     if start
<         expose!(node)
<     end
<     count = 1
<     for ii = 1:2
<         if node.children[ii] != nothing
<             count += nv_cc(node.children[ii], false)
<         end
<     end
<     for n in node.pathChildren
<         count += nv_cc(n, false)
<     end
<     return count
< end
< 
< function sum_cc(
<     node::Node, 
<     partition::LinkCutPartition, 
<     field::String, 
<     start=true
< ) 
<     if start
<         expose!(node)
<     end
<     sum = partition.graph.node_attributes[node.vertex][field]
<     for ii = 1:2
<         if node.children[ii] != nothing
<             sum += sum_cc(node.children[ii], partition, field, false)
<         end
<     end
<     for n in node.pathChildren
<         sum += sum_cc(n, partition, field, false)
<     end
<     return sum
< end
< 
< 
< function topological_sort!(
<     cut_remainder::Dict{Int, Real}, 
<     node::Union{Node, Nothing}, 
<     source::Node,
<     partition::LinkCutPartition,
<     field::String,
<     mass::Real=0,
< )
<     if node === nothing
<         return 0
<     end
<     @show node.vertex, mass, source.vertex
< 
<     remainder = 0
<     if source != node.parent
<         remainder += topological_sort!(cut_remainder, node.parent, node, partition, field, mass)
<     end
<     remainder += topological_sort!(cut_remainder, node.children[2], node, partition, field, remainder)
<     for n in node.pathChildren
<         remainder += topological_sort!(cut_remainder, n, node, partition, field)
<     end
<     
<     index = node.vertex
<     cut_remainder[index] = remainder + partition.graph.node_attributes[index][field]+mass
<     
<     if source != node.children[1]
<         remainder += topological_sort!(cut_remainder, node.children[1], node, partition, field, cut_remainder[index])
<     end
<     return remainder
< end
< 
< function topological_sort(root::Node, partition::LinkCutPartition; 
<                           field::String=partition.graph.pop_col)
<     cut_remainder = Dict{Int,Real}()
<     evert!(root)
<     @assert root.children[1] === nothing
< 
<     topological_sort!(cut_remainder, root.parent, root, partition, field)
<     topological_sort!(cut_remainder, root.children[2], root, partition, 
<                       field)
<     for n in root.pathChildren
<         topological_sort!(cut_remainder, n, root, partition, field)
<     end
<     return cut_remainder
< end
< 
280,281d177
< 
< # function topological_add(node::LinkCutNode)
\ No newline at end of file
